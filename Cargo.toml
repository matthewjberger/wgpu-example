[package]
name = "app"
version = "0.1.0"
edition = "2024"

[lib]
crate-type = ["cdylib", "rlib"]
path = "src/lib.rs"
name = "app_core"

[dependencies]
bytemuck = { version = "1.23.1", features = ["derive"] }
egui = "0.32.0"
egui-wgpu = { version = "0.32.0", features = ["winit"] }
futures = "0.3.31"
log = "0.4.27"
nalgebra-glm = { version = "0.19.0", features = [
    "convert-bytemuck",
    "serde-serialize",
] }
web-time = "1.1.0"
wgpu = { version = "25.0.0", default-features = false }
winit = "0.30.11"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.11.8"
egui-winit = "0.32.0"
pollster = "0.4.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.7"
console_log = "1.0.0"
egui-winit = { version = "0.32.0", default-features = false }
wasm-bindgen = "0.2.100"
wasm-bindgen-futures = "0.4.50"

[features]
default = ["wgpu/default"]
webgl = ["wgpu/webgl"]
webgpu = ["wgpu/webgpu"]

# For very small final binary size,
# uncomment the following release profile and build with it
#
# [profile.release]
# codegen-units = 1 # Reduce parallel code generation units
# strip = true      # Automatically strip symbols from the binary.
# opt-level = "z"   # Optimize for size
# lto = true        # Link time optimization
# panic = "abort"   # On panic, abort immediately rather than unwinding. Don't use this if you want backtraces.
#
# Then compress the final executable further with:
# upx --best --lzma ./target/release/app
#
# Or on windows,
# upx --best --lzma ./target/release/app.exe